pipeline {
  agent { label 'client'}
  environment {
    iris_bin = 'c:\\InterSystems\\IRIS\\bin\\'
  }
  stages {
    stage('Install on Server') {
      agent { label 'server'}
       steps {
         // 成果物をコピー
        copyArtifacts projectName: 'build', target: 'kit'
        // キットをインストール
        bat '%iris_bin%loader kit\\IRISUtils.xml'
        // テストプログラムをロード、コンパイル
        bat 'c:\\InterSystems\\IRIS\\bin\\loader loader\\loadclass.xml src\\Test'
      }
    } 
    stage('Install on client') {
      agent { label 'client'}
       steps {
         // 成果物をコピー
        copyArtifacts projectName: 'build', target: 'kit'
        // キットをインストール
        bat 'c:\\InterSystems\\IRIS\\bin\\loader kit\\IRISUtils.xml'
        // テストプログラムをロード、コンパイル
        bat 'c:\\InterSystems\\IRIS\\bin\\loader loader\\loadclass.xml src\\Test'
      }
    } 
    stage('Invoke client method') {
      agent { label 'client'}
       steps {
        //クライアント側UnitTestを実行
        bat 'c:\\InterSystems\\IRIS\\bin\\loader loader\\execunittest.xml src\\UnitTest:UnitTest.CheckClient'
        junit 'result.xml'
      }
    } 
    stage('Check Data on Server') {
      agent { label 'server'}
       steps {
        // マスターにてデータを保管する
        dir('data') {
          bat "c:\\InterSystems\\IRIS\\bin\\loader -U APP ..\\loader\\execunittest.xml ${env.WORKSPACE}\\SyncTest SyncTest:${params.TestClass}:TestAfterSyncServer"
          junit 'result.xml'
          stash includes: '*server.dat', name: 'server-result'
        }
      }
    }
    stage('Check Data on Client') {
       steps {
        // クライアントにてデータを取得し、比較する
        dir('data') {
          unstash 'server-result'
          bat "loader2021 -U APP ..\\loader\\execunittest.xml ${env.WORKSPACE}\\SyncTest SyncTest:${params.TestClass}:TestAfterSyncClient"
          junit 'result.xml'
        }
      }
    }

  }
}
